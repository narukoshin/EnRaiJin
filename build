#!/bin/bash

# Some variables to work with

app_name="enraijin"
version=$1
releases_dir="releases"
sample_config="config.sample.yml"
version_dir="$releases_dir/$version"

if [ "${#version}" -eq 0 ]; then
    echo -e "Please specify version of the build\nExample: ./build v1.0 ãƒ¼ will compile and archive to v1.0-release.tar.gz"
    exit
fi

if [ ! -d "$releases_dir" ]; then
    mkdir "$releases_dir"
fi

if [ ! -d "$version_dir" ]; then
    mkdir "$version_dir"
fi

echo "* Started compiling binaries"

cp $sample_config $version_dir

windows_binary="$app_name.exe"
linux_binary="$app_name"
mac_binary="$app_name"

# --- Windows ---

GOOS=windows GOARCH=amd64 go build -o $version_dir/$windows_binary main.go
windows_archive_name=$version_dir/$app_name-$version-windows-amd64.tar.gz
tar zcvf $windows_archive_name -C $version_dir $windows_binary $sample_config > /dev/null
rm -f $version_dir/$windows_binary
echo "+ Windows binary compiled to $windows_archive_name"

# --- Linux ---

linux_archive_name=$version_dir/$app_name-$version-linux-amd64.tar.gz
GOOS=linux GOARCH=amd64 go build -o $version_dir/$linux_binary main.go
tar zcvf $linux_archive_name -C $version_dir $linux_binary $sample_config > /dev/null
rm -f $version_dir/$linux_binary
echo "+ Linux binary compiled to $linux_archive_name"

# --- MacOS ---

macos_archive_name=$version_dir/$app_name-$version-macos-arm64.tar.gz
GOOS=darwin GOARCH=arm64 go build -o $version_dir/$mac_binary main.go
tar zcvf $macos_archive_name -C $version_dir $mac_binary $sample_config > /dev/null
rm -f $version_dir/$mac_binary
echo "+ MacOS binary compiled to $macos_archive_name"

rm $version_dir/$sample_config